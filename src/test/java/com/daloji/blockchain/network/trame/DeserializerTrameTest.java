package com.daloji.blockchain.network.trame;


import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Properties;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import com.daloji.blockchain.core.Utils;
import com.daloji.blockchain.network.IPVersion;
import com.daloji.blockchain.network.peers.PeerNode;
import com.daloji.blockchain.network.trame.DeserializerTrame;
import com.daloji.blockchain.network.trame.TrameHeader;
import com.daloji.blockchain.network.trame.VersionAckTrame;
import com.daloji.blockchain.network.trame.VersionTrameMessage;


public class DeserializerTrameTest {
	
	private static String trame="F9BEB4D976657273696F6E000000000066000000E853E24E7F1101000D0400000000000034D51C5E00000000000000000000000000000000000000000000FFFF55AA707389C60D04000000000000000000000000000000000000000000000000012A799748954F40102F5361746F7368693A302E31382E302F6159090001F9BEB4D976657261636B000000000000000000005DF6E0E2";

	private static String partial_trame="F9BEB4D976657273696F6E000000000068000000C79722900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

	 private static String trame_block;
	
	@BeforeClass
	public static void before() throws IOException {
		ClassLoader classLoader = InvTrameTest.class.getClassLoader();
		File file = new File(classLoader.getResource("test.properties").getFile());
		Properties prop = new Properties();
        // load a properties file
        prop.load(new FileInputStream(file));
        trame_block = (prop.getProperty("trame_block"));
          
	}
	@Test
	public  void  deserialiseTest_OK() {
		
		PeerNode peer = new PeerNode(IPVersion.IPV4);
		peer.setHost("127.0.0.1");
		peer.setPort(8333);
		ArrayDeque<TrameHeader> stackCommand = DeserializerTrame.getInstance().deserialise(null,Utils.hexStringToByteArray(trame), peer);
		Assert.assertNotNull(stackCommand); 
		Assert.assertEquals(stackCommand.size(), 2);
		TrameHeader trameheader = stackCommand.pop();
		Assert.assertTrue(trameheader instanceof VersionTrameMessage);
		trameheader = stackCommand.getFirst();
		Assert.assertTrue(trameheader instanceof VersionAckTrame);
		
	}
	
	@Test
	public void deserialiseTestPartialTram() {
		PeerNode peer = new PeerNode(IPVersion.IPV4);
		peer.setHost("127.0.0.1");
		peer.setPort(8333);
		ArrayDeque<TrameHeader> stackCommand = DeserializerTrame.getInstance().deserialise(null,Utils.hexStringToByteArray(partial_trame), peer);
		Assert.assertNotNull(stackCommand); 
		Assert.assertEquals(stackCommand.size(), 1);
		TrameHeader trameheader = stackCommand.pop();
		Assert.assertTrue(trameheader instanceof VersionTrameMessage);

	}
	
	
	@Test
	public void deserialise_001() {
		String trame
		PeerNode peer = new PeerNode(IPVersion.IPV4);
		peer.setHost("127.0.0.1");
		peer.setPort(8333);
		ArrayDeque<TrameHeader> stackCommand = DeserializerTrame.getInstance().deserialise(null,Utils.hexStringToByteArray(trame), peer);
		Assert.assertNotNull(stackCommand); 
		Assert.assertEquals(stackCommand.size(), 3);
		TrameHeader trameheader = stackCommand.pop();

	}
	
	
	/**
	 * 
	 */
	
	@Test
	public void deserialise_002() {
		String trame ="F9BEB4D973656E646865616465727300000000005DF6E0E20000000000000000000000000000FFFF55AA7073C9AE0904000000000000000000000000000000000000000000000000C56A088FD1A7AAC7122F5361746F7368693A302E31392E302E312F095C090001F9BEB4D976657261636B000000000000000000005DF6E0E2";
		PeerNode peer = new PeerNode(IPVersion.IPV4);
		peer.setHost("127.0.0.1");
		peer.setPort(8333);
		ArrayDeque<TrameHeader> stackCommand = DeserializerTrame.getInstance().deserialise(null,Utils.hexStringToByteArray(trame), peer);
		Assert.assertNotNull(stackCommand); 
		Assert.assertEquals(stackCommand.size(), 2);
	}
	
	
	/**
	 * 
	 */
	
	//@Test
	public void deserialise_003() {
		String trame
		PeerNode peer = new PeerNode(IPVersion.IPV4);
		peer.setHost("127.0.0.1");
		peer.setPort(8333);
		ArrayDeque<TrameHeader> stackCommand = DeserializerTrame.getInstance().deserialise(null,Utils.hexStringToByteArray(trame), peer);
		Assert.assertNotNull(stackCommand); 
		Assert.assertEquals(stackCommand.size(), 6);
	}
	
	
	/**
	 * 
	 */
	
	@Test
	public void deserialise_004() {
		String trame = "F9BEB4D9696E76000000000000000000ED04000003EEA8B02301000000807F69F9BA753AAA3F373D89AC8EC7D7A262BF807A89E2BD35F52CDD8011250701000000ED3B0BFADEBA9AA11CADF0999D0A664E55BAEA1378427EDEF11C7B193CE0163A01000000B1B90275D7ABE4F87EE49ABA5431F6B4EF4549AC2C0354CF843667F9D6FCFC2001000000891A894A8152015EC5B8B17041714DB70386747C13770F2293C4CB289F95F3600100000036F55AA33DAEAA2576806FF0BC77963229F552109CF69DBC1EFB1ABE7DC889EB01000000ABA2A10D8BC61BFA0ACC7C1031EE871219640A8EDE3C7FAB86173CEEC585C1F101000000CF0FE5BBA798DD7E65E2D2D6799136E197F23DD48CB874816D8E8B9480C4365801000000F5D72AD72055C330ACA6A58E930416FF0CAA8C252DA5F746D5FB180D22594E7A01000000A68DA976EF4F2ACF517EC5BFBE9618F8A5F8FAF2FC63A6AD97ABA76B4DF97D59010000007E81EFDE1842BA8BED3C033728D4BCAAE82CFBEB5818F73C52C039297A83626D010000007AB348B98E9CD4E1F5BADCA1EFD7EDB5FD2BD6C33239DA9960DE344565B94649010000000311207787B06A234273BE318059721E5F0BFB0FE27E871FBACE003528F0D0850100000098FF5F72890A5E28364A1691CC2B7FCA8F470E2060862F6476E0E97A9C312A8D0100000053FD11AB3DDA5E398DAB351AE1BB50D35064932FAEE659B00465A24827B0C784010000003FF48816068F4D71C7D6B8442830CEAB9554561AC9C66A23B1C7096105B27D56010000001E9BB69E09B37EACBCB9E9595791578E5FEF183E4BA4394F914F68366FF3FC1501000000ED21B58E4248A62D3E3ACA55372A93C64804B56066D1EE8924200B95FF948F4801000000B1467BC21F7FAE25666A288FD4B6A721FC9105D213AD78B421260EB9FA9B71D90100000021D3306B43A7CA296A32944ACC95EE56EA9D84A9F55966922969CDA1942F4C6D0100000028CF4AEE2124172400C43244A5634374E2EAE52C5A3429E5DFBEA19ECD71F2AD01000000E2AEDE513C96A17484BE3E705736DFA59A449AD06A86CABD402C46667EF17C7C01000000F4ABAEF30471BDE4F34126F18D2979173FFF88ACC25C0586611F9ECCA9063F0601000000ECD4B556C81F28BD8CAFB332E3FAA7409DC2DC09DBD5C1DC76A9BB3F0F7EF10001000000CDDA5CBAECDA9C771F21708B4B81F4E7821B143826669FE26D65DE7C1C5A590D01000000C7E508A733C312A0D5CE3F892A9A2314C67A970F8CD0F3DE25A6C78FC68A094D01000000B818356E7202AB5062E634AB1D254A898175E8D0230F2D0DC0DC76A2E915D05501000000B54B281A7268BA4C062A18C6A02C59DB2AFE4601437A803833A9E7C363381BC701000000AC78D1E466B0576CA8FEB6AAF54D53D1062FCF4AB13220E1F920C9422B80E1E4010000000EFB06ACDD9560F81469228A9D4D44F5B82C22A2086A53E699C13F2F25170C6B010000004204BB400D778165C25BF85D8A61546DA8936E17DAC341E69ED6E06A874FEE160100000067586AFB88CB2824F4A80647547577FA2FEC930C3D7A7D2C9A026450007236BA01000000D42723E25D829187531C823425A09E59703C7355334EA915A0CEEF466AD3E68E010000005534ECCF18B9C611E0D6FA45D3C0CF05310911715CD6935AFF0421B1BE227D5201000000E830723FFB1F707F510941A6E087E0BD0380AC8C96550DB6B516BF75A7ABBE3001000000095690709F9F2A0223C45622E2A4B5997BD961420DE631BD890C4856E1632B780000";
		PeerNode peer = new PeerNode(IPVersion.IPV4);
		peer.setHost("127.0.0.1");
		peer.setPort(8333);
		ArrayDeque<TrameHeader> stackCommand = DeserializerTrame.getInstance().deserialise(null,Utils.hexStringToByteArray(trame), peer);
		Assert.assertNotNull(stackCommand); 
		Assert.assertEquals(stackCommand.size(), 1);
		InvTrame inv =(InvTrame) stackCommand.getLast();
		Assert.assertEquals(inv.getListinv().size(), 35);

	}
	
	
	/**
	 * 
	 */
	
	@Test
	public void deserialise_005() {
		String trame
		PeerNode peer = new PeerNode(IPVersion.IPV4);
		peer.setHost("127.0.0.1");
		peer.setPort(8333);
		ArrayDeque<TrameHeader> stackCommand = DeserializerTrame.getInstance().deserialise(null,Utils.hexStringToByteArray(trame), peer);
		Assert.assertNotNull(stackCommand); 
		Assert.assertEquals(stackCommand.size(), 2);

	}
	
	
	/**
	 * 
	 */
	
	@Test
	public void deserialise_007() {
		String trame = "F9BEB4D973656E646865616465727300000000005DF6E0E2F9BEB4D973656E64636D70637400000009000000E92F5EF80000000000000000000000000000FFFF55AA70739BB80D04000000000000000000000000000000000000000000000000F1AABE9A3240BA0C102F5361746F7368693A302E31382E302F4B5C090001F9BEB4D976657261636B000000000000000000005DF6E0E20000";
		PeerNode peer = new PeerNode(IPVersion.IPV4);
		peer.setHost("127.0.0.1");
		peer.setPort(8333);
		ArrayDeque<TrameHeader> stackCommand = DeserializerTrame.getInstance().deserialise(null,Utils.hexStringToByteArray(trame), peer);
		Assert.assertNotNull(stackCommand); 
		Assert.assertEquals(stackCommand.size(), 2);

	}
	
	/**
	 * 
	 */
	
	@Test
	public void deserialise_008() {
		String trame = "F9BEB4D973656E64636D70637400000009000000E92F5EF8000200000000000000F9BEB4D973656E64636D70637400000009000000CCFE104A000100000000000000F9BEB4D970696E67000000000000000008000000D8B3E6B2B44D3FAFFF620AB9F9BEB4D96164647200000000000000001F0000008BD6137E01E739245E0D0400000000000000000000000000000000FFFF42BF8E44208DF9BEB4D967657468656164657273000005040000F0E50BF100";
		PeerNode peer = new PeerNode(IPVersion.IPV4);
		peer.setHost("127.0.0.1");
		peer.setPort(8333);
		ArrayDeque<TrameHeader> stackCommand = DeserializerTrame.getInstance().deserialise(null,Utils.hexStringToByteArray(trame), peer);
		Assert.assertNotNull(stackCommand); 
		Assert.assertEquals(stackCommand.size(), 5);
		GetHeadersTrame getHeader =(GetHeadersTrame) stackCommand.getLast();
		Assert.assertEquals(getHeader.isPartialTrame(), true);

	}
	/**
	 * 
	 */
	
	//@Test
	public void deserialise_009() {
		String trame = "F9BEB4D973656E646865616465727300000000005DF6E0E2F9BEB4D973656E64636D70637400000009000000E92F5EF80000000000000000000000000000FFFF55AA7073E0100D04000000000000000000000000000000000000000000000000C9C03247391F06D8112F5361746F7368693A302E31372E39392FA35C090001F9BEB4D976657261636B000000000000000000005DF6E0E200";
		PeerNode peer = new PeerNode(IPVersion.IPV4);
		peer.setHost("127.0.0.1");
		peer.setPort(8333);
		ArrayDeque<TrameHeader> stackCommand = DeserializerTrame.getInstance().deserialise(null,Utils.hexStringToByteArray(trame), peer);
		Assert.assertNotNull(stackCommand); 
		Assert.assertEquals(stackCommand.size(), 5);
		GetHeadersTrame getHeader =(GetHeadersTrame) stackCommand.getLast();
		Assert.assertEquals(getHeader.isPartialTrame(), true);

	}
	
	/**
	 * 
	 */
	
	@Test
	public void deserialise_010() {
		PeerNode peer = new PeerNode(IPVersion.IPV4);
		peer.setHost("127.0.0.1");
		peer.setPort(8333);
		ArrayDeque<TrameHeader> stackCommand = DeserializerTrame.getInstance().deserialise(null,Utils.hexStringToByteArray(trame_block), peer);
		Assert.assertNotNull(stackCommand); 
		Assert.assertEquals(stackCommand.size(), 6);
		TrameHeader trame = stackCommand.removeLast();
		Assert.assertEquals(trame instanceof ErrorTrame ,true);
		BlockTrame block =(BlockTrame) stackCommand.getLast();
		Assert.assertEquals(block.getChecksum(), "934D270A");
		Assert.assertEquals(block.getMerkelRoot(), "982051FD1E4BA744BBBE680E1FEE14677BA1A3C3540BF7B1CDB606E857233E0E");
		Assert.assertEquals(block.getTime(), 1231469665);
		Assert.assertEquals(block.getPreviousHash(), "6FE28C0AB6F1B372C1A6A246AE63F74F931E8365E15A089C68D6190000000000");
		Assert.assertEquals(block.getVersion(), "01000000");
		Assert.assertEquals(block.getNonce(),(long) 2573394689L);


	}
	
	
	
}
