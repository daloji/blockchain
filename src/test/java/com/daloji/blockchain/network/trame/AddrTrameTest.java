package com.daloji.blockchain.network.trame;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import com.daloji.blockchain.core.utils.Utils;
import com.daloji.blockchain.network.IPVersion;
import com.daloji.blockchain.network.peers.PeerNode;

public class AddrTrameTest {
	
	private String trame = "F9BEB4D96164647200000000000000001F000000FBBBB04601A796255E0D0400000000000000000000000000000000FFFF52B0A428208D274A29A84C000100000025447370CE3D48285D29AD3EDFCDA9A23E5949FECF1B6B6FBCFE9BD186B35C43010000002C5BFF2930D81F5342CA3ADF30512C892992D464C153559A0801E58DB2F023E101000000A99889AC865055117D26373821589B74B13E391A4C2637A7662F023D9E9F4A5E0100000058681B8F035CABD8F8A0CEBB7793C01CDD35E19230B55A814E43C34D31B7CA430100000047F062E4E36A694E29307D16CE9759CEE5F047DA583D77AC5F11D44BF6A1AA7301000000CF8C76114A2FB04D820D65341E252C00156D5870927AEDBDF771EEA36A67F8D9010000001A8489536651BD1433118D4099013D49C3EFC273524452ABAA4BD5C40BD1657F01000000393E6D705E1AD1FA6FAD4B46D22861DB77EEADCB6FAC9BD7DA8971AD5CC4199E01000000E4BE020FFAD807AEF017B1F78E1388B8624E3DC9336BB8BE25376038F4524AA3010000000867173D8FC00A7ECD6712466C5247D0618A12260D3370735A68F25C7FC70A9601000000DA1C0AC3F2233598F48F448A1A296A3B3642E1EB78982DA41CA4902F2743DA3E01000000A731B981EB68DA7B9058B48586E6CC5C309F17F211AF86D5CF991B0D5068DB2F010000008A0C132CA9790C248E86E86D2C45D0868ED85BBAC32FFADB9299A7A4573FC2F60100000070767EEB369DFF3269F772B34BC90000BE86EF39792AFED2AE0F42E36557DB1701000000367066FB369B70EFA27D3EB782F8E131FC7D58550F8B7728A7E165D01EB99CFA010000002D7E7EF5BB3D3C4A30BB6AD70F9CE5F500FDABC80E1E864DAEF619D12D060DED010000000876D492B7BF79091BAED321EECC54F948A3314E4981C5366D6301EA9FBD73640100000022856B70D151ED382D35DD3A2B0972EE3F67C45A27DC35A5A536BE29C8534E7B0100000029D93E41410A152A34A1501A4A30E09AA1DE61F3BDD2CF1166D287D499BF2BD30100000000C74D9ACDA0686984ED6DB9E762B48E5357B6841568B914D28D6AA01C32385F01000000C5AA7712DF6A8BAE77344B74B795FA3EEDFEA9E4240B26D1B03963056CB4850001000000DEE4A475D43922D20E21511DD743720A0D0F306C0319975AEEE2A96997FE3F7D0100000046922D2C3B1D7BCC62797CB98F077852ACD27BA82A8BA3D6E09EE8138909489801000000C787358E4625E2B6FC5978004BFB3D51FA7505E3CD58ADB0A6413B0DBF3FF2E4010000007255C9E855349A07C9F8D4DDFB0EC05F036B06E3D1F215EA591FBC9091A74EDA0100000058CF30AA914A53FC2A7C88DFBD2722B6A0835367B148D187D30444A756CB740801000000230C044CBA7D6F2DD896BFEA9F28DACC4D2E1854818F98BFAD8538AECF38A75301000000D9A84E8BAB7D19F03DBBA10CC7BBFB57F7C8178035DA9DC0F56C5914EF89731701000000BD4BF23D44A619198EFE0E72105EE5CF2AAA5F0EB92759A369E3B6FB88663C24010000009367FAB84E2C5D4ED4521C7C6B830A11ECE917ECD43084856B97C70E4800AA240100000087728781BC7CB992644980058D4DD6E622F84195847B09ECCD086634DCDCB3330100000061F518DE99B34A3994864EA2C101D90DC23B83D2A411370655164E780CDC2FDE0100000001722C9FFA9ECC6873B625DBF4BBDAF1DF68E200080D72C64827ADC4E8C15CE101000000F2572CDDD3464522441DAA7D317F45140B3CAC27D3B554E6E779AB5616855BF50000";

	private String trame_expect = "274A29A84C000100000025447370CE3D48285D29AD3EDFCDA9A23E5949FECF1B6B6FBCFE9BD186B35C43010000002C5BFF2930D81F5342CA3ADF30512C892992D464C153559A0801E58DB2F023E101000000A99889AC865055117D26373821589B74B13E391A4C2637A7662F023D9E9F4A5E0100000058681B8F035CABD8F8A0CEBB7793C01CDD35E19230B55A814E43C34D31B7CA430100000047F062E4E36A694E29307D16CE9759CEE5F047DA583D77AC5F11D44BF6A1AA7301000000CF8C76114A2FB04D820D65341E252C00156D5870927AEDBDF771EEA36A67F8D9010000001A8489536651BD1433118D4099013D49C3EFC273524452ABAA4BD5C40BD1657F01000000393E6D705E1AD1FA6FAD4B46D22861DB77EEADCB6FAC9BD7DA8971AD5CC4199E01000000E4BE020FFAD807AEF017B1F78E1388B8624E3DC9336BB8BE25376038F4524AA3010000000867173D8FC00A7ECD6712466C5247D0618A12260D3370735A68F25C7FC70A9601000000DA1C0AC3F2233598F48F448A1A296A3B3642E1EB78982DA41CA4902F2743DA3E01000000A731B981EB68DA7B9058B48586E6CC5C309F17F211AF86D5CF991B0D5068DB2F010000008A0C132CA9790C248E86E86D2C45D0868ED85BBAC32FFADB9299A7A4573FC2F60100000070767EEB369DFF3269F772B34BC90000BE86EF39792AFED2AE0F42E36557DB1701000000367066FB369B70EFA27D3EB782F8E131FC7D58550F8B7728A7E165D01EB99CFA010000002D7E7EF5BB3D3C4A30BB6AD70F9CE5F500FDABC80E1E864DAEF619D12D060DED010000000876D492B7BF79091BAED321EECC54F948A3314E4981C5366D6301EA9FBD73640100000022856B70D151ED382D35DD3A2B0972EE3F67C45A27DC35A5A536BE29C8534E7B0100000029D93E41410A152A34A1501A4A30E09AA1DE61F3BDD2CF1166D287D499BF2BD30100000000C74D9ACDA0686984ED6DB9E762B48E5357B6841568B914D28D6AA01C32385F01000000C5AA7712DF6A8BAE77344B74B795FA3EEDFEA9E4240B26D1B03963056CB4850001000000DEE4A475D43922D20E21511DD743720A0D0F306C0319975AEEE2A96997FE3F7D0100000046922D2C3B1D7BCC62797CB98F077852ACD27BA82A8BA3D6E09EE8138909489801000000C787358E4625E2B6FC5978004BFB3D51FA7505E3CD58ADB0A6413B0DBF3FF2E4010000007255C9E855349A07C9F8D4DDFB0EC05F036B06E3D1F215EA591FBC9091A74EDA0100000058CF30AA914A53FC2A7C88DFBD2722B6A0835367B148D187D30444A756CB740801000000230C044CBA7D6F2DD896BFEA9F28DACC4D2E1854818F98BFAD8538AECF38A75301000000D9A84E8BAB7D19F03DBBA10CC7BBFB57F7C8178035DA9DC0F56C5914EF89731701000000BD4BF23D44A619198EFE0E72105EE5CF2AAA5F0EB92759A369E3B6FB88663C24010000009367FAB84E2C5D4ED4521C7C6B830A11ECE917ECD43084856B97C70E4800AA240100000087728781BC7CB992644980058D4DD6E622F84195847B09ECCD086634DCDCB3330100000061F518DE99B34A3994864EA2C101D90DC23B83D2A411370655164E780CDC2FDE0100000001722C9FFA9ECC6873B625DBF4BBDAF1DF68E200080D72C64827ADC4E8C15CE101000000F2572CDDD3464522441DAA7D317F45140B3CAC27D3B554E6E779AB5616855BF50000";
	
	private static String trame_Addr;
	@BeforeClass
	public static void before() throws IOException {
		ClassLoader classLoader = AddrTrameTest.class.getClassLoader();
		File file = new File(classLoader.getResource("test.properties").getFile());
		Properties prop = new Properties();
        // load a properties file
        prop.load(new FileInputStream(file));
        trame_Addr = (prop.getProperty("trame_Addr"));
	}
	
	
	@Test
	public void AddrTrameTest_001() {
		AddrTrame addr = new AddrTrame(false);
		PeerNode peer = new PeerNode(IPVersion.IPV4);
		peer.setHost("127.0.0.1");
		addr.setFromPeer(peer);
		byte[] data = addr.deserialise(Utils.hexStringToByteArray(trame));
		Assert.assertEquals(addr.getMagic(),"F9BEB4D9");
		Assert.assertEquals(addr.getChecksum(),"FBBBB046");
		Assert.assertEquals(addr.getCommande(),"616464720000000000000000");
		Assert.assertEquals(addr.getLength(),31);
		Assert.assertEquals(Utils.allZero(data),false);
		Assert.assertEquals(Utils.bytesToHex(data),trame_expect);
	}
	
	@Test
	public void AddrTrameTest_002() {
		AddrTrame addr = new AddrTrame(false);
		PeerNode peer = new PeerNode(IPVersion.IPV4);
		peer.setHost("127.0.0.1");
		addr.setFromPeer(peer);
		byte[] data = addr.deserialise(Utils.hexStringToByteArray(trame_Addr));
		Assert.assertEquals(Utils.allZero(data),true);
		Assert.assertEquals(addr.getListAddr().size(),1);
		Assert.assertEquals(addr.getListAddr().get(0).getIp(),"91.197.44.133");
		Assert.assertEquals(addr.getListAddr().get(0).getPort(),8333);

	}
	
	
}
